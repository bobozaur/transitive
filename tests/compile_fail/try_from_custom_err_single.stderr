error: At least two types are required for a transitive conversion
  --> tests/compile_fail/try_from_custom_err_single.rs:20:27
   |
20 |     #[transitive(try_from(A, error = Infallible))] // impl From<A> for C
   |                           ^^

error[E0277]: the trait bound `C: From<A>` is not satisfied
  --> tests/compile_fail/try_from_custom_err_single.rs:32:22
   |
32 |     let _: Result<C, <C as TryFrom<A>>::Error> = C::try_from(A);
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<A>` is not implemented for `C`
   |
   = help: the trait `TryFrom<A>` is not implemented for `C`
           but trait `TryFrom<B>` is implemented for it
   = help: for that trait implementation, expected `B`, found `A`
   = note: required for `A` to implement `Into<C>`
   = note: required for `C` to implement `TryFrom<A>`

error[E0277]: the trait bound `C: TryFrom<A>` is not satisfied
  --> tests/compile_fail/try_from_custom_err_single.rs:32:50
   |
32 |     let _: Result<C, <C as TryFrom<A>>::Error> = C::try_from(A);
   |                                                  ^ the trait `From<A>` is not implemented for `C`
   |
   = help: the trait `TryFrom<A>` is not implemented for `C`
           but trait `TryFrom<B>` is implemented for it
   = help: for that trait implementation, expected `B`, found `A`
   = note: required for `A` to implement `Into<C>`
   = note: required for `C` to implement `TryFrom<A>`
