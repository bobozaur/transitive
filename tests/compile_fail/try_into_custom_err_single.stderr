error: At least two types are required for a transitive conversion
  --> tests/compile_fail/try_into_custom_err_single.rs:20:27
   |
20 |     #[transitive(try_into(A, error = Infallible))] // impl From<C> for A
   |                           ^^

error[E0277]: the trait bound `A: From<C>` is not satisfied
  --> tests/compile_fail/try_into_custom_err_single.rs:32:22
   |
32 |     let _: Result<A, <A as TryFrom<C>>::Error> = A::try_from(C(B(A)));
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<C>` is not implemented for `A`
   |
   = help: the trait `TryFrom<C>` is not implemented for `A`
           but trait `TryFrom<B>` is implemented for it
   = help: for that trait implementation, expected `B`, found `C`
   = note: required for `C` to implement `Into<A>`
   = note: required for `A` to implement `TryFrom<C>`

error[E0277]: the trait bound `A: TryFrom<C>` is not satisfied
  --> tests/compile_fail/try_into_custom_err_single.rs:32:50
   |
32 |     let _: Result<A, <A as TryFrom<C>>::Error> = A::try_from(C(B(A)));
   |                                                  ^ the trait `From<C>` is not implemented for `A`
   |
   = help: the trait `TryFrom<C>` is not implemented for `A`
           but trait `TryFrom<B>` is implemented for it
   = help: for that trait implementation, expected `B`, found `C`
   = note: required for `C` to implement `Into<A>`
   = note: required for `A` to implement `TryFrom<C>`
